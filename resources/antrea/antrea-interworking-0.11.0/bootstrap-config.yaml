apiVersion: v1
kind: Namespace
metadata:
  name: vmware-system-antrea
  labels:
    app: antrea-interworking
    openshift.io/run-level: '0'
---
# NOTE: In production the bootstrap config and secret should be filled by admin
# manually or external automation mechanism.
apiVersion: v1
kind: ConfigMap
metadata:
  name: bootstrap-config
  namespace: vmware-system-antrea
data:
  bootstrap.conf: |
    # bootstrapFrom can be "Inline" and "SupervisorCluster"
    # If "SupervisorCluster" is set, bootstrapSupervisorResourceName must be set, and clusterName, NSXManagers, vpcPath,
    # ProxyEndpoints will be filled automatically by register job.
    bootstrapFrom: "Inline"
    # bootstrapSupervisorResourceName is required if bootstrapFrom is "SupervisorCluster"
    # bootstrapSupervisorResourceName: dummyClusterName

    # Fill in the cluster name. It should be unique among the clusters managed by the NSX-T.
    clusterName: k8s-cluster1
    # Fill in the NSX manager IPs. If there is only one IP, the value should be like [dummyNSXIP1]
    # If the value is IPv6 address with square brackets, a pair of single quotes are required. e.g. ['[aaa::aaa]', aaa::aab]
    NSXManagers: [192.168.110.201]
    # vhcPath is deprecated by vpcPath
    # vhcPath: ""
    # vpcPath is optional. It's for multi-tenancy isolation in NSX.
    vpcPath: ""
    # proxyEndpoints is optional. If proxyEndpoints.rest-api is set, NSXManagers will be ignored.
    proxyEndpoints:
      rest-api: []
      nsx-rpc-fwd-proxy: []
---
apiVersion: v1
kind: Secret
metadata:
  name: nsx-cert
  namespace: vmware-system-antrea
type: kubernetes.io/tls
data:
  # One line base64 encoded data. Can be generated by command: cat tls.crt | base64 -w 0
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURaVENDQWswQ0ZGb1NmU2ZtM2V3K291RnJSb2wxUzNheTRzajBNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1HOHgKQ3pBSkJnTlZCQVlUQWxWVE1Rc3dDUVlEVlFRSURBSkRRVEVTTUJBR0ExVUVCd3dKVUdGc2J5QkJiSFJ2TVE4dwpEUVlEVlFRS0RBWldUWGRoY21VeEZ6QVZCZ05WQkFzTURrRnVkSEpsWVNCRGJIVnpkR1Z5TVJVd0V3WURWUVFECkRBeHJPSE10WTJ4MWMzUmxjakV3SGhjTk1qTXhNakEzTVRZd05qVTNXaGNOTXpNeE1qQTBNVFl3TmpVM1dqQnYKTVFzd0NRWURWUVFHRXdKVlV6RUxNQWtHQTFVRUNBd0NRMEV4RWpBUUJnTlZCQWNNQ1ZCaGJHOGdRV3gwYnpFUApNQTBHQTFVRUNnd0dWazEzWVhKbE1SY3dGUVlEVlFRTERBNUJiblJ5WldFZ1EyeDFjM1JsY2pFVk1CTUdBMVVFCkF3d01hemh6TFdOc2RYTjBaWEl4TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEKdExnUFJCVVY4d2RTWDI5VmRmK244WXNOT3BYeTFoM2VEV09HdlRzTTI2UW5hci8wcW1COEY0alNnanRUYlg4RAp6emFaak5icGtCS25EdEFVSklJZ2RkZXJRZ25ZdngrcVlqQjI0a3JlMi8xYml0UGxEV3VsbG9rYnh6YVY5aDJNClRCb21kNExjVEhmWlZKNlArOThRcFBwNE14cmNrd3NadzdhM2UvZU44M1RZWjVWNDY2NGZnSDF3b0VpK0pKS0wKK3BjSEFpdHRZclBGbkI5QmMxZmg1dzJQZFo1Z25TRDFBVUhyNkFDbzZxU09ueXFCZmwwQUk1aGNCcGdTTHZ4RgpoUE94czZqWkhBbjdzQXp1Vk1pU01XLzRuYlFQbTVBOGFwaFQyOEo5VWU0UUNaOG8ycmhISWE5RUJhMGdyaGtMCmE1SmM3VHBLaVU3K0JGeXI3Nm5lL3dJREFRQUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUEzL1RZVUxZMXQKaHNZTTBCUGt1aTNGRk1GTWFoSjEyRGZKQ1JvYVllOTU4dGszcnpNekpuUWw3cXlYMElOWG5sVWJGcXNYTlBIdQpQaFRIUys2QXE1NkhIcGlyM3MwRHJwQ3dzeGRFNWkwczkxWFh0TEhnV2dPMTR4azJpdzZFNFlkOWlTYVEzdFl5Clp0VU9GV1h2OEN5RFZNOTU4SC9sT04vZ0JlQ3M2WFBFc2c2U3h5eTk2Y05WaEVaREtVSjQ4dWwvQ0xVVkVNRWoKbzBVWVl2bjdWZlhvRWFuZk5WNjlLU2p3S3B4cGpnRnlLcHJXYzNBazIwZWFET2YzSllwdmd2OVBNMVNnKzFSRgpEUjViZXhtNVE1V2pNZUV6dzJJNmIvZjNCT05uN0thQVpjUVlCVlE3ay84N1VLMHN3blRuRXowQVpvZHFSdGF5Ck9iT1RyNFE2V201VAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  # One line base64 encoded data. Can be generated by command: cat tls.key | base64 -w 0
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdExnUFJCVVY4d2RTWDI5VmRmK244WXNOT3BYeTFoM2VEV09HdlRzTTI2UW5hci8wCnFtQjhGNGpTZ2p0VGJYOER6emFaak5icGtCS25EdEFVSklJZ2RkZXJRZ25ZdngrcVlqQjI0a3JlMi8xYml0UGwKRFd1bGxva2J4emFWOWgyTVRCb21kNExjVEhmWlZKNlArOThRcFBwNE14cmNrd3NadzdhM2UvZU44M1RZWjVWNAo2NjRmZ0gxd29FaStKSktMK3BjSEFpdHRZclBGbkI5QmMxZmg1dzJQZFo1Z25TRDFBVUhyNkFDbzZxU09ueXFCCmZsMEFJNWhjQnBnU0x2eEZoUE94czZqWkhBbjdzQXp1Vk1pU01XLzRuYlFQbTVBOGFwaFQyOEo5VWU0UUNaOG8KMnJoSElhOUVCYTBncmhrTGE1SmM3VHBLaVU3K0JGeXI3Nm5lL3dJREFRQUJBb0lCQUFScGVmWHZqZG1oRkNIQQpWaFhMYUE0OWx0VVhWQlptSkVXdmFGcTJWbG9HWisvelA4WHBGUjU5K0tXMVRSUWZSYmlKWExaVGlPQTdsRmlJCk8vV29ONktvNFVWN2VBOHlkclp1K0hnTjIrTURESGtYTTBCZ29HcE1icUV1Yy9yT1BkNmR4TkttSHpxK3NrK2UKajJWV3pORTZURFR6TXU5a0ZmenhPUW1Od2FsdjVrMDdGUStZN3l3SExyT0xYYUIxR0xnTHRzc2ZBYVFBYW9Gbgp1OUxMQ2pFbDNEbnFXaThJWUdDQXVpTUZzZmJGWjJzR3hCMVNjUlBraVdlTnA3TU5oNllxQ1BiSVhvN3lHdld1Cnd5M2hJRVlPUkw1VzVoOXRMeEJSYW9Na2hMRFNjQkpnR21QbTNMTEpIcTZSR294V2xxaXdWRFovNUpUYnYvOGwKVXFwOFFnRUNnWUVBNnplZUlVVEoxbmp3V3VsVDlhK2NGd3M3cXZMZVVtUVRZb0IvVnVCZGdYdnZ4RWJ5YnozWApWZnUxZDNhbFlUSTdxZWN6TVJORngwaVdWeGZIVUtOQzBzTHg1dW1xWXZMYlR6TWl5YXI4VktHdHpoZzlTMHVsClhoRXlmNzV4VWhYMkZMRmIzWUFRZjhvMEVJSktaM0E5THhGMlVvblRWSDZSLzBQU21DK1l3SE1DZ1lFQXhLKysKcDl6NDlsREdQNFMwbUh3MC9SSjgwMGxBMHRWV1l0RUd3bjFtWVFkRW5TTmhEQWZXaEFCQWd6UHhoYm5LZHBIYgpTcVRyOVVnd2lCNVRiNE0xTFF2NlFHc1BodWtUZlNsd1o4SzFmdmp6bzJKU05vQUhSU1llK2NqOS90d2JyY1pRCm5LSWlrQW5BRmgrVWR4ZEc1clVteHJ4WVkxeWE4RFZ5djAwS0FFVUNnWUVBbkVsTEp6M0dnbHUvRUJqQ2NaY3EKTm1GL1Z0bWlnTW4vMjA0WHpnaXIrSEg1NE1kbkpDVEo1RmFudjJXMUF2eldpZENWd2dEVk4xRnlteEd3bkZLdAovczRLM3V2WkMzL2oyaDdXK1hwRHlKUFlvUHlZRldTQXp4ek1HZmJXNHJ5MjBnNzZSQlZvWVJCZ1FhdmdkaFFzCmd3NnVPSzlkSEdJdzdaUUo1SmFUZnlNQ2dZRUFxa2tONC85b2ZMa0tLc3dXSHo3S0VhRUQrVm1laWVxeVUvTnMKeXM0TzZVcUZtUmFjV3ZJZVEwS0VtQk5Nczk1YTc3VHdDdndtWGNJV1lvTCs4YmpEUFREMWhQZ3NCVDJkNWVzTwpxb2JrNC8xZDBzSzVNdjQ5VFJ6b0RKSjdkVC9UcHV2ZnR2eVl0K1A1TGk1Qk42b3JkR3E2RzYzTlNKbFFlMCtLCi9SMFIzNUVDZ1lFQXFoaTVOblRUOFhLZ2lISmZGdVJzR3h0R2NQZU94emhNYnpjWWJKR2wvQ1hDTWlIRStHc04KNXlwV29iU09kOXhnTXFlR3JONE5qUFVjaXM4c25JNW95VmRTdWw5dGdGMTBjQ0JEYjNaY3V5MHBOejg5ZmVmQQp0ZTgwWjBCTHkwM0g3Y1BSSFJFMnVISFZmajhFZC9xSUJKWEhhbUV5YTRFZk9YczJBL0lBb0dFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
